
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__ibmc_adaptor_h__ADAPTOR_MARSHAL_H
#define __dbusxx__ibmc_adaptor_h__ADAPTOR_MARSHAL_H

#include <dbus-c++-1/dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace freedesktop {
namespace keti {
namespace bmc {

class ibmc_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    ibmc_adaptor()
    : ::DBus::InterfaceAdaptor("org.freedesktop.keti.bmc.ibmc")
    {
        register_method(ibmc_adaptor, ibmc_policy, _ibmc_policy_stub);
        register_method(ibmc_adaptor, ibmc_feedback, _ibmc_feedback_stub);
        register_method(ibmc_adaptor, ibmc_monitor, _ibmc_monitor_stub);
        register_method(ibmc_adaptor, ibmc_energy, _ibmc_energy_stub);
        register_method(ibmc_adaptor, ibmc_ssp, _ibmc_ssp_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument ibmc_policy_args[] = 
        {
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ibmc_feedback_args[] = 
        {
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ibmc_monitor_args[] = 
        {
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ibmc_energy_args[] = 
        {
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument ibmc_ssp_args[] = 
        {
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod ibmc_adaptor_methods[] = 
        {
            { "ibmc_policy", ibmc_policy_args },
            { "ibmc_feedback", ibmc_feedback_args },
            { "ibmc_monitor", ibmc_monitor_args },
            { "ibmc_energy", ibmc_energy_args },
            { "ibmc_ssp", ibmc_ssp_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod ibmc_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty ibmc_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface ibmc_adaptor_interface = 
        {
            "org.freedesktop.keti.bmc.ibmc",
            ibmc_adaptor_methods,
            ibmc_adaptor_signals,
            ibmc_adaptor_properties
        };
        return &ibmc_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual int32_t ibmc_policy() = 0;
    virtual int32_t ibmc_feedback() = 0;
    virtual int32_t ibmc_monitor() = 0;
    virtual int32_t ibmc_energy() = 0;
    virtual int32_t ibmc_ssp() = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _ibmc_policy_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = ibmc_policy();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _ibmc_feedback_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = ibmc_feedback();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _ibmc_monitor_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = ibmc_monitor();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _ibmc_energy_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = ibmc_energy();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _ibmc_ssp_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = ibmc_ssp();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } } } 
#endif //__dbusxx__ibmc_adaptor_h__ADAPTOR_MARSHAL_H
