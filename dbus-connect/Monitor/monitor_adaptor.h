
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__monitor_adaptor_h__ADAPTOR_MARSHAL_H
#define __dbusxx__monitor_adaptor_h__ADAPTOR_MARSHAL_H

#include <dbus-c++-1/dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace freedesktop {
namespace keti {
namespace bmc {

class monitor_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    monitor_adaptor()
    : ::DBus::InterfaceAdaptor("org.freedesktop.keti.bmc.monitor")
    {
        register_method(monitor_adaptor, monitor_ibmc, _monitor_ibmc_stub);
        register_method(monitor_adaptor, monitor_policy, _monitor_policy_stub);
        register_method(monitor_adaptor, monitor_feedback, _monitor_feedback_stub);
        register_method(monitor_adaptor, monitor_energy, _monitor_energy_stub);
        register_method(monitor_adaptor, monitor_ssp, _monitor_ssp_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument monitor_ibmc_args[] = 
        {
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument monitor_policy_args[] = 
        {
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument monitor_feedback_args[] = 
        {
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument monitor_energy_args[] = 
        {
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument monitor_ssp_args[] = 
        {
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod monitor_adaptor_methods[] = 
        {
            { "monitor_ibmc", monitor_ibmc_args },
            { "monitor_policy", monitor_policy_args },
            { "monitor_feedback", monitor_feedback_args },
            { "monitor_energy", monitor_energy_args },
            { "monitor_ssp", monitor_ssp_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod monitor_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty monitor_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface monitor_adaptor_interface = 
        {
            "org.freedesktop.keti.bmc.monitor",
            monitor_adaptor_methods,
            monitor_adaptor_signals,
            monitor_adaptor_properties
        };
        return &monitor_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual int32_t monitor_ibmc() = 0;
    virtual int32_t monitor_policy() = 0;
    virtual int32_t monitor_feedback() = 0;
    virtual int32_t monitor_energy() = 0;
    virtual int32_t monitor_ssp() = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _monitor_ibmc_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = monitor_ibmc();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _monitor_policy_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = monitor_policy();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _monitor_feedback_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = monitor_feedback();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _monitor_energy_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = monitor_energy();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _monitor_ssp_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = monitor_ssp();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } } } 
#endif //__dbusxx__monitor_adaptor_h__ADAPTOR_MARSHAL_H
